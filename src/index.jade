doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title IPCluster – Scaling Zopim’s frontend node servers

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        h1 IPCluster
        h2 Scaling Zopim’s frontend Node.js servers

      section
        h2 Outline
        ul
          li Scaling lessons
          li IPCluster

      section
        h2 Kwok Yang Bin
        ul
          li Cofounder of Zopim

      section
        h2
          img(src='images/zopim-best.png')

        ul
          li 150,000 sites use Zopim
          li 3,000,000,000 impressions / month
          li 500,000 peak concurrent connections

      section
        h2 10Q4 Dashboard Rewrite
        h3 in HTML5

      section
        img(src='images/dashboard_flex.png')

      section
        img.argh(src='images/dashboard_html5.jpg')

      section
        h3 Node.js mediator
        ul
          li Globally distributed servers
          li Normalizes data to realtime
          li “Dynamic” CDN

      section
        h2 Node.js rocks!!!
        ol
          li vi server.js
          li
            pre ab -n 100000 -c 1000 http://localhost:8080/
          li
            pre ???
          li Profit!

      section
        h2 Node.js rocks?
        ul
          li Single threaded
          li Memory leaks

      section
        h2 “All problems in computer science can be solved by another level of indirection”

      section
        img(src='images/enterprise_infrastructure.png')

      section
        h2 What We Tried
        ul
          li cluster module
          li nginx WebSockets
          li HA Proxy
          li stud
          li Forwarding socket FDs

      section
        h2 Issues
        ul
          li Hard to capture client IP address
          li Bufferbloat
          li stud dies

      section
        h2 What if there was a better way?

      section
        h2 Netmask Primer
        h3 192.168.5.128/26
        table
          tbody
            tr
              th
              th Binary form
              th Dot-decimal notation
            tr
              td IP address
              td 11000000.10101000.00000101.10000010
              td 192.168.5.130
            tr
              td Subnet mask
              td 11111111.11111111.11111111.11000000
              td 255.255.255.192
            tr
              td Network prefix
              td 11000000.10101000.00000101.10000000
              td 192.168.5.128
            tr
              td Host part
              td 00000000.00000000.00000000.00000010
              td 0.0.0.2

      section
        h2 Abusing Netmask Matching
        h3 Match the Least-Significant-Bits!

      section
        h2 Linux Netfilter
        pre
          code.language-bash.
            iptables -A PREROUTING -s 0.0.0.0/0.0.0.3 -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 10080
            iptables -A PREROUTING -s 0.0.0.1/0.0.0.3 -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 10081
            iptables -A PREROUTING -s 0.0.0.2/0.0.0.3 -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 10082
            iptables -A PREROUTING -s 0.0.0.3/0.0.0.3 -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 10083

      section
        h2 Remaining Issues
        ul
          li Memory leaks
          li Restarts disconnect users
          li Human error inserting rules

      section
        h2 Introducing IPCluster
        h3 Eschew "Enterprise” topologies, embrace standalone servers

      section
        h2 IPCluster Features
        ul
          li Multicore
          li Graceful worker retirement
          li Hot code reload
          li Bare metal
          li Detects and retires workers that are too_busy

      section
        h2 Design
        ul
          li Master manages workers
          li Workers select listening port
          li Communicates over UDS
          li Master manages iptables
          li Master manages masters

      section
        h2 Retiring Workers
        ul
          li Retire workings when approaching memory limit
          li Retire Unresponsive workers
          li Kill retired workers when approaching cluster limit

      section
        h2 IPCluster – Future
        ul
          li Automatic heap diff'ing
          li Management GUI

      section
        h2 Acknowledgements
        h3 Thanks Team! and Tim!

      section
        h2 That's all folks!

    script(src='build/build.js')
